feature name: "User Groups"

pretty self-explanatory: allows to define groups of different users.
users can be selected either by user snowflake ID or by role snowflake ID to select all in that role

other features of the bot can then use user groups

for example, only a certain group would be allowed to add new simple-response commands





user groups need hierarchy

each user group has:
	* a list of implied groups
	* a list of member inclusion rules
	* a list of permissions




=== permissions ===

each user group can be given a set of permissions.
each permission allows the user to do a specific thing.
by default, a user group has no permissions at all.


Permission string syntax:
	<namespace> ( '.' <sub-namespace> )* '.' <action> [ ':' <argument> ]

	<namespace>, <sub-namespace>s and <action> all must be camelCase identifiers
	<argument> must not be empty and must only consist of ascii letters and digits


	```
	value class PermissionNamespace(val string: String)
	value class PermissionSubNamespace(val string: String)
	value class PermissionAction(val string: String)

	value class PermissionArgument(val string: String)

	data class PermissionInfo(
		val namespace: PermissionNamespace,
		val subNamespaces: List<PermissionSubNamespace>,
		val action: PermissionAction,
	)

	interface PermissionManager {

		suspend fun isMemberAllowedToPerformAction(member: Member, permissionInfo: PermissionInfo): Boolean

		suspend fun isMemberAllowedToPerformAction(
			member: Member,
			permissionInfo: PermissionInfo,
			argument: PermissionArgument,
		): Boolean
	}


	val POLLS_PERMISSION_NAMESPACE = PermissionNamespace.ofString("polls")

	val POLL_CREATION_PERMISSION_INFO =
		PermissionInfo(
			POLLS_PERMISSION_NAMESPACE,
			PermissionAction.ofString("create"),
		)

	permissionManager.isMemberAllowedToPerformAction(commandExecuter, POLL_CREATION_PERMISSION_INFO)


	val AUTO_CHANNELS_SORTING_PERMISSION_NAMESPACE = PermissionNamespace.ofString("autoChannelsSorting")

	val AUTO_CHANNELS_SORTING_EDITING_PERMISSION_INFO =
		PermissionInfo(
			AUTO_CHANNELS_SORTING_PERMISSION_NAMESPACE,
			PermissionAction.ofString("edit"),
		)

	permissionManager.isMemberAllowedToPerformAction(
		commandExecuter,
		AUTO_CHANNELS_SORTING_EDITING_PERMISSION_INFO,
		channelCategory.id,
	)
	```





=== user groups management command ===


usage: /user-groups add <name: String>
   or: /user-groups list
   or: /user-groups show <name: String>
   or: /user-groups edit <name: String>
   or: /user-groups rename <name: String> <newName: String>
   or: /user-groups remove <name: String>
   or: /user-groups edit-hierarchy


modal of /user-groups edit: (add subcommand should also just open this and not have a <name> argument)

	+------------------------------------------------+
	| Name                                           |
	| +--------------------------------------------+ |
	| |                                            | |
	| +--------------------------------------------+ |
	|                                                |
	| Implied Groups                                 |
	| +--------------------------------------------+ |
	| |                                            | |
	| |                                            | |
	| |                                            | |
	| |                                            | |
	| |                                            | |
	| |                                            | |
	| +--------------------------------------------+ |
	|                                                |
	| Member Inclusion Rules                         |
	| +--------------------------------------------+ |
	| | include user <id> <name>                   | |
	| | include user <id>                          | |
	| | include <id>                               | |
	| | include role <id> <name>                   | |
	| | include role <id>                          | |
	| | include <id>                               | |
	| +--------------------------------------------+ |
	|                                                |
	+------------------------------------------------+





examples:

< /user-groups list
> No user groups have been added yet


< /user-groups add Plebs
> The new (empty) user group _"Plebs"_ has been added

< /user-groups add plebs
> A user group with the name _"Plebs"_ already exists

< /user-groups edit plebs

< /user-groups list
> * _"Plebs"_

< /user-groups show plebs
> The user group _"Plebs"_ contains the following rules:
> * @everyone is included
> (the full list of members is too big to display)
(allow_mentions would be off for this message)


< /user-groups add admin
> The new (empty) user group _"admin"_ has been added

< /user-groups rename admin Admins
> The user group _"admin"_ was renamed to _"Admins"_

< /user-groups show admins
> The user group _"Admins"_ contains no rules


< /user-groups remove plebs
> The user group _"Plebs"_ was removed




=== Permission Definitions ===

	The resource <userGroup> is identified by its name.

	userGroups.create&editHierarchy
		Permits creating a new user group and editing the hierarchy of all the groups below the user's highest one.

	userGroups.list
		Permits listing the user's highest user group and all user groups that are below the highest one.

	userGroups.show
		Permits showing the details of the user's highest user group and all user groups that are below the highest one.

	userGroups.edit:<userGroup>
		Permits editing the user group <userGroup> if that group is below the user's highest user group.
		Users can only add permissions that they themselves have.

	userGroups.remove:<userGroupName>
		Permits removing the user group <userGroupName> if that group is below that user's highest user group-


------


Everyone:
	implied groups: (none)

	member inclusion rules:
		include everyone

	permissions:
		polls.vote:[owned by user group "Plebs"]

Plebs:
	implied groups:
		Everyone

	member inclusion rules:
		include role <zebra enjoyer role snowflake id>

	permissions:
		polls.create
		polls.vote:[*]
		polls.close:[owned by self]

Staff:
	implied groups:
		Plebs

	member inclusion rules:
		include role <staff role snowflake id>

	permissions:
		dateTimeSharing.use

Moderators:
	implied groups:
		Staff

	member inclusion rules:
		include role <moderators role snowflake id>

	permissions:
		userGroups.list
		userGroups.show

		polls.close:[owned by user group "Staff"]

		autoChannelsSorting.show:*
		autoChannelsSorting.enable&disable:*

Maintainers:
	implied groups:
		Staff

	member inclusion rules:
		include role <maintainers role snowflake id>

	permissions:
		polls.*
		userGroups.*
		autoChannelsSorting.*
		twitchIntegration.*

Admins:
	implied groups:
		Staff
		Moderators
		Maintainers

	member inclusion rules:
		include role <admins role snowflake id>

	permissions:
		*
