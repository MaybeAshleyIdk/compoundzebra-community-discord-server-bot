feature name: "Time Conversion"

uses user-level/message-level discord interaction feature -> right click on message -> apps -> time

check message text for a pattern like that:
	12h clock: /\bt?[0-9]+(\s*[:.]\s*[0-9]+(\s*[:.]\s*[0-9+](\s*\.\s*[0-9]*)?)?)?\s*[ap]\s*m\b/i
	24h clock: /\bt?[0-9]+\s*[:.]\s*[0-9]+(\s*[:.]\s*[0-9]+(\s*\.\s*[0-9]*)?)?\b/

if not found -> send ephemeral message that no time could be found

TODO: pattern with timezone as well (things like UTC, [+-][0-9]+[:.][0-9]+, GMT and other well known (but not standardized) timezones like CE(S)T and stuff)
      if that is also found, add that timezone/offset to it
      if none is found we have a java.time.LocalDateTime, but with the timezone/offset we'd have java.time.ZonedDateTime or java.time.OffsetDateTime

if no timezone, check the timezone (or offset!) the user configured before
	/timezone or something

if no timezone -> send ephemeral message

if all is well, convert the date-time that we have now to UTC instant and send message like this:
	"(original time with timezone) is <t:...:F> (<t:...:R>) in your local timezone"

it should reply to the message that the interaction was triggered on.
we have to reply to the interaction itself with an ephemeral that says something like "all done!" or some stuff

<https://discord.com/developers/docs/reference#message-formatting-timestamp-styles>


<https://en.wikipedia.org/wiki/Lists_of_time_zones>

time zones like CET aren't really part of any standard, but are still used a lot, so we gotta support those as well

members can configured these types of "timezones":
* tz timezones (e.g.: Europe/Vienna) - this is preferred
* UTC offsets
* non-standard timezone abbreviation (e.g.: CET, CEST)
