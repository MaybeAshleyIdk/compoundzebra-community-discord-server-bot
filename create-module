#!/bin/sh
# -*- sh -*-
# vim: syntax=sh
# code: language=shellscript

#region preamble

case "$-" in
	(*'i'*)
		\command printf 'script was called interactively\n' >&2
		return 124
		;;
esac

set -o errexit
set -o nounset

# enabling POSIX-compliant behavior for GNU programs
export POSIXLY_CORRECT=yes POSIX_ME_HARDER=yes

if [ "${0#/}" = "$0" ]; then
	argv0="$0"
else
	argv0="$(basename -- "$0" && printf x)"
	argv0="${argv0%"$(printf '\nx')"}"
fi
readonly argv0

#endregion

#region args

module_path_pattern='^(:[a-z][a-z0-9-]+)+$'
readonly module_path_pattern

print_usage() {
	printf 'usage: %s <module_path>...\n' "$argv0" >&2
}

if [ $# -eq 0 ]; then
	printf '%s: missing arguments: <module_path>...\n' "$argv0" >&2
	print_usage
	exit 3
fi

i=0

for arg in "$@"; do
	i=$((i + 1))

	if [ -z "$arg" ]; then
		if [ $# -eq 1 ]; then
			printf '%s: argument must not be empty\n' "$argv0" >&2
		else
			printf '%s: argument %d: must not be empty\n' "$argv0" $i >&2
		fi
		print_usage
		exit 9
	fi

	if ! { printf '%s' "$arg" | grep -Eq -- "$module_path_pattern"; }; then
		printf '%s: %s: does not match: %s\n' "$argv0" "$arg" "$module_path_pattern" >&2
		exit 12
	fi

	if printf '%s' "$arg" | grep -Eq -- '--'; then
		printf '%s: %s: must not contain a substring of two consecutive dashes (--)\n' "$argv0" "$arg" >&2
		exit 13
	fi
done; unset -v arg

unset -v i
unset -f print_usage

#endregion

root_dir_pathname="$(dirname -- "$0" && printf x)"
root_dir_pathname="${root_dir_pathname%"$(printf '\nx')"}"
readonly root_dir_pathname

gradle_build_file_template_regular_pathname="$root_dir_pathname/module-templates/regular-gradle.build.kts"
gradle_build_file_template_api_pathname="$root_dir_pathname/module-templates/api-gradle.build.kts"
gradle_build_file_template_impl_pathname="$root_dir_pathname/module-templates/impl-gradle.build.kts"
gradle_build_file_template_wiring_pathname="$root_dir_pathname/module-templates/wiring-gradle.build.kts"
readonly gradle_build_file_template_regular_pathname \
         gradle_build_file_template_api_pathname \
         gradle_build_file_template_impl_pathname \
         gradle_build_file_template_wiring_pathname

for module_path in "$@"; do
	module_dir_pathname="$(printf '%s' "${module_path#:}" | sed -e s/:/'\/'/g)"

	gradle_build_file_template_pathname="$gradle_build_file_template_regular_pathname"
	if printf '%s' "$module_path" | grep -Eq ':api$'; then
		gradle_build_file_template_pathname="$gradle_build_file_template_api_pathname"
	elif printf '%s' "$module_path" | grep -Eq ':impl(-[^:]*)?$'; then
		gradle_build_file_template_pathname="$gradle_build_file_template_impl_pathname"
	elif printf '%s' "$module_path" | grep -Eq ':wiring$'; then
		gradle_build_file_template_pathname="$gradle_build_file_template_wiring_pathname"
	fi

	mkdir -p -- "$root_dir_pathname/$module_dir_pathname/src/main/kotlin/io/github/maybeashleyidk/discordbot/compoundzebracommunity"

	printf '/build/\n' > "$root_dir_pathname/$module_dir_pathname/.gitignore"
	cp -- "$gradle_build_file_template_pathname" "$root_dir_pathname/$module_dir_pathname/build.gradle.kts"

	unset -v gradle_build_file_template_pathname \
	         module_dir_pathname
done; unset -v module_path
